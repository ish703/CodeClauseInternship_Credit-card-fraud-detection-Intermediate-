# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V7MEPaAmP9mkagPurpDRjaav0P_4ZXok
"""

# Step 1: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load dataset
df = pd.read_csv('/creditcard.csv.zip')
print("Dataset Shape:", df.shape)
df.head()

# Check info
df.info()

# Check for nulls
print("\nMissing values:\n", df.isnull().sum())

# Count of each class
class_counts = df['Class'].value_counts()
print("\nClass Distribution:\n", class_counts)

# Plot class distribution
sns.countplot(data=df, x='Class')
plt.title("0 = Non-Fraud, 1 = Fraud")
plt.show()

# Correlation matrix
corr_matrix = df.corr()

# Focus on correlation with Class
correlation_with_class = corr_matrix["Class"].sort_values(ascending=False)
print("\nTop correlated features with fraud:\n", correlation_with_class.head(10))

# Distribution of Amount
plt.figure(figsize=(6,4))
sns.histplot(df['Amount'], bins=50)
plt.title('Transaction Amount Distribution')
plt.show()

# Distribution of Time
plt.figure(figsize=(6,4))
sns.histplot(df['Time'], bins=50)
plt.title('Transaction Time Distribution')
plt.show()

from sklearn.model_selection import train_test_split

X = df.drop('Class', axis=1)
y = df['Class']

# Split before applying SMOTE
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

from imblearn.over_sampling import SMOTE

sm = SMOTE(random_state=42)
X_resampled, y_resampled = sm.fit_resample(X_train, y_train)

print("Before SMOTE:", y_train.value_counts())
print("After SMOTE:", y_resampled.value_counts())

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

# Train the model
lr = LogisticRegression(max_iter=1000)
lr.fit(X_resampled, y_resampled)

# Predict on test set
y_pred_lr = lr.predict(X_test)

# Evaluate
print("Logistic Regression Classification Report:\n")
print(classification_report(y_test, y_pred_lr))

from sklearn.ensemble import RandomForestClassifier

# Train model
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_resampled, y_resampled)

# Predict
y_pred_rf = rf.predict(X_test)

# Evaluate
print("Random Forest Classification Report:\n")
print(classification_report(y_test, y_pred_rf))